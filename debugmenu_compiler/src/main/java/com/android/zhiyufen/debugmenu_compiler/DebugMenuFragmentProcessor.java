package com.android.zhiyufen.debugmenu_compiler;

import com.android.zhiyufen.debugmenu.annotation.DebugMenuFragment;
import com.google.auto.service.AutoService;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterizedTypeName;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.type.TypeMirror;
import javax.lang.model.util.Elements;
import javax.tools.Diagnostic;

@AutoService(Processor.class)
@SupportedSourceVersion(SourceVersion.RELEASE_8)
@SupportedAnnotationTypes("com.android.zhiyufen.debugmenu.annotation.DebugMenuFragment")
public class DebugMenuFragmentProcessor extends AbstractProcessor {
    private Elements mElementUtils;
    private Filer mFiler;
    private Messager mMessager;

    private TypeMirror TYPE_PREFERENCE_FRAGMENT = null;

    @Override
    public synchronized void init(ProcessingEnvironment processingEnv) {
        super.init(processingEnv);
        //init tool
        mElementUtils = processingEnv.getElementUtils();
        mFiler = processingEnv.getFiler();
        mMessager = processingEnv.getMessager();

        TYPE_PREFERENCE_FRAGMENT = mElementUtils.getTypeElement(
                "android.preference.PreferenceFragment").asType();
    }

    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        parseAnnotation(roundEnv.getElementsAnnotatedWith(DebugMenuFragment.class));
        return true;
    }

    private void parseAnnotation(Set<? extends Element> elements) {
        if (elements == null || elements.isEmpty())
            return;

        ClassName fragmentInfo = ClassName.get("com.android.zhiyufen.mebugmenu",
                "DebugMenuFragmentInfo");
        ClassName list = ClassName.get("java.util", "List");
        TypeName liftOfFragmentInfo = ParameterizedTypeName.get(list, fragmentInfo);

        MethodSpec.Builder getAllScreenBuilder = MethodSpec.methodBuilder("getAllDebugFragmentInfo")
                .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                .returns(liftOfFragmentInfo)
                .addJavadoc("Get all debug menu information which user using @DebugMenuFragment.\n")
                .addStatement("$T debugFragmentLists = new $T<>()", liftOfFragmentInfo, ArrayList.class);

        for (Element element : elements) {
            if (element instanceof TypeElement) {
                DebugMenuFragment annotation = element.getAnnotation(DebugMenuFragment.class);
                String title = annotation.title();
                String fragmentName;

                TypeElement typeElement = (TypeElement)element;
                fragmentName = typeElement.getQualifiedName().toString();
                if (textIsEmpty(title) || textIsEmpty(fragmentName))
                    continue;

                //Check the class, which using @DebugMenuFragment, is extends from PreferenceFragment;
                if (typeElement.getSuperclass().equals(TYPE_PREFERENCE_FRAGMENT)) {
                    getAllScreenBuilder.addStatement("debugFragmentLists.add(new $T($S, $S))",
                            fragmentInfo, title, fragmentName);
                } else {
                    mMessager.printMessage(Diagnostic.Kind.WARNING, "[DebugMenu] "
                            + typeElement.getSuperclass()
                            + "is not extend android.preference.PreferenceFragment ");
                }
            }
        }
        getAllScreenBuilder.addStatement("return debugFragmentLists");

        TypeSpec typeSpec = TypeSpec.classBuilder("AllPreferenceScreen$$DebugMenu")
                .addModifiers(Modifier.FINAL, Modifier.PUBLIC)
                .addMethod(getAllScreenBuilder.build())
                .addJavadoc("This file is automatically generated. Please do not modify it manually.")
                .addJavadoc("\n")
                .build();

        JavaFile javaFile = JavaFile.builder(
                "com.android.zhiyufen.mebugmenu", typeSpec)
                .build();

        try {
            javaFile.writeTo(mFiler);
        } catch (IOException e) {
            mMessager.printMessage(Diagnostic.Kind.ERROR,
                    "[DebugMenu] exception = " + e.toString());
        }
    }

    private boolean textIsEmpty(CharSequence str) {
        return str == null || str.length() == 0;
    }
}

